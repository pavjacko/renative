{{PLUGIN_PODFILE_SOURCES}}
platform :ios, '{{PLUGIN_DEPLOYMENT_TARGET}}'
use_frameworks!
{{PLUGIN_WARNINGS}}

# ReNative: To allow dynamic plugins via flavours autolinking has to be disabled
# require_relative '../../node_modules/@react-native-community/cli-platform-ios/native_modules'

target 'RNVApp' do
  pod 'FBLazyVector', :path => "{{PATH_REACT_NATIVE}}/Libraries/FBLazyVector"
  pod 'FBReactNativeSpec', :path => "{{PATH_REACT_NATIVE}}/Libraries/FBReactNativeSpec"
  pod 'RCTRequired', :path => "{{PATH_REACT_NATIVE}}/Libraries/RCTRequired"
  pod 'RCTTypeSafety', :path => "{{PATH_REACT_NATIVE}}/Libraries/TypeSafety"
  pod 'React', :path => '{{PATH_REACT_NATIVE}}/'
  pod 'React-Core', :path => '{{PATH_REACT_NATIVE}}/'
  pod 'React-CoreModules', :path => '{{PATH_REACT_NATIVE}}/React/CoreModules'
  pod 'React-Core/DevSupport', :path => '{{PATH_REACT_NATIVE}}/'
  pod 'React-RCTActionSheet', :path => '{{PATH_REACT_NATIVE}}/Libraries/ActionSheetIOS'
  pod 'React-RCTAnimation', :path => '{{PATH_REACT_NATIVE}}/Libraries/NativeAnimation'
  pod 'React-RCTBlob', :path => '{{PATH_REACT_NATIVE}}/Libraries/Blob'
  pod 'React-RCTImage', :path => '{{PATH_REACT_NATIVE}}/Libraries/Image'
  pod 'React-RCTLinking', :path => '{{PATH_REACT_NATIVE}}/Libraries/LinkingIOS'
  pod 'React-RCTNetwork', :path => '{{PATH_REACT_NATIVE}}/Libraries/Network'
  pod 'React-RCTSettings', :path => '{{PATH_REACT_NATIVE}}/Libraries/Settings'
  pod 'React-RCTText', :path => '{{PATH_REACT_NATIVE}}/Libraries/Text'
  pod 'React-RCTVibration', :path => '{{PATH_REACT_NATIVE}}/Libraries/Vibration'
  pod 'React-Core/RCTWebSocket', :path => '{{PATH_REACT_NATIVE}}/'

  pod 'React-cxxreact', :path => '{{PATH_REACT_NATIVE}}/ReactCommon/cxxreact'
  pod 'React-jsi', :path => '{{PATH_REACT_NATIVE}}/ReactCommon/jsi'
  pod 'React-jsiexecutor', :path => '{{PATH_REACT_NATIVE}}/ReactCommon/jsiexecutor'
  pod 'React-jsinspector', :path => '{{PATH_REACT_NATIVE}}/ReactCommon/jsinspector'
  pod 'React-callinvoker', :path => "{{PATH_REACT_NATIVE}}/ReactCommon/callinvoker"
  pod 'ReactCommon/turbomodule/core', :path => "{{PATH_REACT_NATIVE}}/ReactCommon"
  pod 'Yoga', :path => '{{PATH_REACT_NATIVE}}/ReactCommon/yoga'

  pod 'DoubleConversion', :podspec => '{{PATH_REACT_NATIVE}}/third-party-podspecs/DoubleConversion.podspec'
  pod 'glog', :podspec => '{{PATH_REACT_NATIVE}}/third-party-podspecs/glog.podspec'
  pod 'Folly', :podspec => '{{PATH_REACT_NATIVE}}/third-party-podspecs/Folly.podspec'

{{PLUGIN_PATHS}}

  # ReNative: To allow dynamic plugins via flavours autolinking has to be disabled
  # use_native_modules!('../..')
end

pre_install do |installer|
  # workaround for https://github.com/CocoaPods/CocoaPods/issues/3289
  Pod::Installer::Xcode::TargetValidator.send(:define_method, :verify_no_static_framework_transitive_dependencies) {}
end

static_frameworks = [{{PLUGIN_STATIC_FRAMEWORKS}}]

pre_install do |installer|
  installer.pod_targets.each do |pod|
    if static_frameworks.include?(pod.name){{PLUGIN_STATIC_POD_EXTRA_CONDITIONS}}
      def pod.static_framework?;
        true
      end
      def pod.build_type;
        {{PLUGIN_STATIC_POD_DEFINITION}}
      end
    end
  end
end


post_install do |installer|
  ## Fix for XCode 12.5
  find_and_replace("{{PATH_REACT_NATIVE}}/React/CxxBridge/RCTCxxBridge.mm",
  "_initializeModules:(NSArray<id<RCTBridgeModule>> *)modules", "_initializeModules:(NSArray<Class> *)modules")
  find_and_replace("{{PATH_REACT_NATIVE}}/ReactCommon/turbomodule/core/platform/ios/RCTTurboModuleManager.mm",
  "RCTBridgeModuleNameForClass(module))", "RCTBridgeModuleNameForClass(Class(module)))")
  {{INJECT_POST_INSTALL}}
end

def find_and_replace(dir, findstr, replacestr)
  Dir[dir].each do |name|
      text = File.read(name)
      replace = text.gsub(findstr,replacestr)
      if text != replace
          puts "Fix: " + name
          File.open(name, "w") { |file| file.puts replace }
          STDOUT.flush
      end
  end
  Dir[dir + '*/'].each(&method(:find_and_replace))
end

{{PLUGIN_PODFILE_INJECT}}
